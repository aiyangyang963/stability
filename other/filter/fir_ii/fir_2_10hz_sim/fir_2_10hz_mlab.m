%
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!
%
%---------------------------------------------------------------------------------------------------------
%This is a filter with fixed coefficients.
%This Model Only Support Single Channel Input Data.
%Please input:
%data vector: 		stimulation(1:n)

%    This Model Only Support FIR_WIDTH to 51 Bits

%FILTER PARAMETER
%Input Data Width: 13
%Interpolation Factor: 1
%Decimation Factor: 1
%FIR Width (Full Calculation Width Before Output Width Adjust) :48
%-----------------------------------------------------------------------------------------------------------
%MegaWizard Scaled Coefficient Values

function  output = fir_2_10hz_mlab(stimulation, bank);
 coef_matrix_in= [9812,6666,8638,10745,12927,15079,17096,18902,20346,21325,21746,21520,20572,18887,16403,13168,9225,4680,-376,-5794,-11392,-17005,-22453,-27525,-32070,-35938,-39023,-41205,-42484,-42860,-42364,-41130,-39264,-36961,-34403,-31784,-29331,-27224,-25614,-24620,-24319,-24711,-25764,-27344,-29271,-31333,-33244,-34704,-35381,-34974,-33184,-29797,-24605,-17502,-8502,2317,14763,28548,43267,58467,73606,88114,101418,112931,122141,128567,131848,131743,128131,121042,110643,97264,81357,63493,44320,24560,4996,-13649,-30670,-45404,-57353,-66082,-71349,-73080,-71319,-66307,-58422,-48188,-36193,-23146,-9737,3310,15320,25689,33921,39610,42559,42650,39986,34749,27299,18089,7630,-3461,-14643,-25298,-34944,-43101,-49467,-53801,-56029,-56179,-54403,-51002,-46322,-40784,-34839,-28970,-23582,-19097,-15786,-13875,-13454,-14507,-16915,-20452,-24801,-29602,-34418,-38857,-42514,-45028,-46126,-45645,-43477,-39670,-34372,-27826,-20361,-12385,-4364,3280,10083,15651,19684,21927,22288,20783,17502,12716,6772,75,-6877,-13589,-19549,-24304,-27450,-28714,-27901,-24936,-19925,-13047,-4650,4876,15004,25207,34959,43703,50987,56435,59776,60860,59701,56435,51303,44727,37142,29105,21159,13875,7735,3175,541,0,1640,5342,10925,17999,26140,34794,43402,51378,58196,63373,66533,67436,65946,62124,56149,48369,39188,29180,18917,8984,0,-7524,-13168,-16599,-17683,-16388,-12897,-7464,-571,7268,15455,23341,30309,35757,39218,40302,38827,34719,28082,19218,8548,-3401,-15967,-28473,-40227,-50596,-59008,-64998,-68294,-68730,-66398,-61522,-54464,-45795,-36148,-26216,-16750,-8427,-1911,2302,3837,2513,-1685,-8578,-17788,-28789,-40919,-53440,-65585,-76571,-85691,-92358,-96105,-96662,-93953,-88099,-79431,-68460,-55833,-42289,-28684,-15832,-4499,4635,11016,14297,14312,11136,5041,-3491,-13815,-25177,-36705,-47526,-56796,-63749,-67767,-68429,-65480,-58918,-49001,-36148,-21009,-4394,12807,29662,45238,58677,69242,76406,79822,79401,75307,67933,57880,45930,33018,20121,8232,-1715,-8924,-12731,-12746,-8773,-918,10474,24816,41295,58978,76812,93728,108687,120756,129214,133503,133338,128718,119944,107543,92298,75157,57218,39610,23447,9767,-571,-6922,-8894,-6396,361,10910,24470,40076,56631,72929,87738,99958,108597,112901,112344,106760,96256,81267,62530,41009,17878,-5613,-28127,-48444,-65450,-78212,-86098,-88791,-86293,-78964,-67451,-52703,-35908,-18360,-1429,13514,25268,32792,35306,32401,23958,10278,-8021,-30008,-54494,-80078,-105301,-128673,-148854,-164611,-175055,-179555,-177884,-170209,-157086,-139373,-118258,-95172,-71635,-49241,-29451,-13649,-2874,2106,933,-6350,-19278,-37021,-58391,-81959,-106098,-129124,-149396,-165423,-175958,-180097,-177297,-167500,-151036,-128703,-101659,-71364,-39519,-7916,21656,47526,68264,82742,90266,90582,83900,70913,52733,30806,6847,-17231,-39519,-58226,-71740,-78753,-78392,-70281,-54494,-31633,-2784,30595,66684,103480,138936,171007,197885,218036,230347,234214,229549,216787,196937,171398,142021,110839,80063,51875,28277,11001,1384,210,7750,23687,47119,76631,110372,146190,181737,214650,242672,263832,276564,279784,273057,256503,230919,197644,158531,115820,71981,29587,-8894,-41205,-65510,-80469,-85375,-80153,-65420,-42439,-13032,20527,55652,89604,119688,143421,158666,163828,157959,140772,112765,75081,29542,-21475,-75262,-128838,-179224,-223605,-259528,-285021,-298792,-300282,-289702,-268061,-237074,-199089,-156950,-113728,-72673,-36871,-9089,8397,13965,6802,-13123,-44907,-86925,-136754,-191474,-247714,-301997,-350833,-391060,-419985,-435591,-436645,-422860,-394853,-354159,-303141,-244809,-182685,-120561,-62259,-11362,29000,56390,69167,66684,49287,18360,-23793,-74103,-128838,-183949,-235208,-278625,-310560,-328108,-329162,-312697,-278791,-228586,-164355,-89273,-7268,77218,159554,235132,299770,349885,382813,396975,391993,368712,329222,276639,215072,149215,84156,24982,-23507,-57112,-72598,-67812,-41942,4454,69438,149817,241258,338658,436329,528477,609473,674291,718808,740133,736747,708709,657601,586523,499913,403220,302675,204808,116061,42409,-11121,-40753,-44215,-20948,27766,98950,188013,289040,395093,498709,592317,668783,721817,746423,739320,699078,626389,523977,396553,250483,93502,-65796,-218488,-355874,-470070,-554467,-604341,-617043,-592362,-532555,-442258,-328319,-199360,-65344,63087,175236,261093,311900,320884,283682,198743,67542,-105451,-312863,-544866,-789600,-1033974,-1264306,-1467278,-1630776,-1744655,-1801527,-1797283,-1731577,-1607991,-1433959,-1220512,-981797,-734308,-495985,-285187,-119583,-15034,15500,-37081,-177237,-404258,-711915,-1088558,-1517363,-1976944,-2442334,-2886022,-3279340,-3593904,-3803122,-3883607,-3816606,-3589149,-3194988,-2635177,-1918431,-1060927,-85917,977132,2093667,3225523,4332487,5374122,6311508,7109055,7736061,8168222,8388607,8388607,8168222,7736061,7109055,6311508,5374122,4332487,3225523,2093667,977132,-85917,-1060927,-1918431,-2635177,-3194988,-3589149,-3816606,-3883607,-3803122,-3593904,-3279340,-2886022,-2442334,-1976944,-1517363,-1088558,-711915,-404258,-177237,-37081,15500,-15034,-119583,-285187,-495985,-734308,-981797,-1220512,-1433959,-1607991,-1731577,-1797283,-1801527,-1744655,-1630776,-1467278,-1264306,-1033974,-789600,-544866,-312863,-105451,67542,198743,283682,320884,311900,261093,175236,63087,-65344,-199360,-328319,-442258,-532555,-592362,-617043,-604341,-554467,-470070,-355874,-218488,-65796,93502,250483,396553,523977,626389,699078,739320,746423,721817,668783,592317,498709,395093,289040,188013,98950,27766,-20948,-44215,-40753,-11121,42409,116061,204808,302675,403220,499913,586523,657601,708709,736747,740133,718808,674291,609473,528477,436329,338658,241258,149817,69438,4454,-41942,-67812,-72598,-57112,-23507,24982,84156,149215,215072,276639,329222,368712,391993,396975,382813,349885,299770,235132,159554,77218,-7268,-89273,-164355,-228586,-278791,-312697,-329162,-328108,-310560,-278625,-235208,-183949,-128838,-74103,-23793,18360,49287,66684,69167,56390,29000,-11362,-62259,-120561,-182685,-244809,-303141,-354159,-394853,-422860,-436645,-435591,-419985,-391060,-350833,-301997,-247714,-191474,-136754,-86925,-44907,-13123,6802,13965,8397,-9089,-36871,-72673,-113728,-156950,-199089,-237074,-268061,-289702,-300282,-298792,-285021,-259528,-223605,-179224,-128838,-75262,-21475,29542,75081,112765,140772,157959,163828,158666,143421,119688,89604,55652,20527,-13032,-42439,-65420,-80153,-85375,-80469,-65510,-41205,-8894,29587,71981,115820,158531,197644,230919,256503,273057,279784,276564,263832,242672,214650,181737,146190,110372,76631,47119,23687,7750,210,1384,11001,28277,51875,80063,110839,142021,171398,196937,216787,229549,234214,230347,218036,197885,171007,138936,103480,66684,30595,-2784,-31633,-54494,-70281,-78392,-78753,-71740,-58226,-39519,-17231,6847,30806,52733,70913,83900,90582,90266,82742,68264,47526,21656,-7916,-39519,-71364,-101659,-128703,-151036,-167500,-177297,-180097,-175958,-165423,-149396,-129124,-106098,-81959,-58391,-37021,-19278,-6350,933,2106,-2874,-13649,-29451,-49241,-71635,-95172,-118258,-139373,-157086,-170209,-177884,-179555,-175055,-164611,-148854,-128673,-105301,-80078,-54494,-30008,-8021,10278,23958,32401,35306,32792,25268,13514,-1429,-18360,-35908,-52703,-67451,-78964,-86293,-88791,-86098,-78212,-65450,-48444,-28127,-5613,17878,41009,62530,81267,96256,106760,112344,112901,108597,99958,87738,72929,56631,40076,24470,10910,361,-6396,-8894,-6922,-571,9767,23447,39610,57218,75157,92298,107543,119944,128718,133338,133503,129214,120756,108687,93728,76812,58978,41295,24816,10474,-918,-8773,-12746,-12731,-8924,-1715,8232,20121,33018,45930,57880,67933,75307,79401,79822,76406,69242,58677,45238,29662,12807,-4394,-21009,-36148,-49001,-58918,-65480,-68429,-67767,-63749,-56796,-47526,-36705,-25177,-13815,-3491,5041,11136,14312,14297,11016,4635,-4499,-15832,-28684,-42289,-55833,-68460,-79431,-88099,-93953,-96662,-96105,-92358,-85691,-76571,-65585,-53440,-40919,-28789,-17788,-8578,-1685,2513,3837,2302,-1911,-8427,-16750,-26216,-36148,-45795,-54464,-61522,-66398,-68730,-68294,-64998,-59008,-50596,-40227,-28473,-15967,-3401,8548,19218,28082,34719,38827,40302,39218,35757,30309,23341,15455,7268,-571,-7464,-12897,-16388,-17683,-16599,-13168,-7524,0,8984,18917,29180,39188,48369,56149,62124,65946,67436,66533,63373,58196,51378,43402,34794,26140,17999,10925,5342,1640,0,541,3175,7735,13875,21159,29105,37142,44727,51303,56435,59701,60860,59776,56435,50987,43703,34959,25207,15004,4876,-4650,-13047,-19925,-24936,-27901,-28714,-27450,-24304,-19549,-13589,-6877,75,6772,12716,17502,20783,22288,21927,19684,15651,10083,3280,-4364,-12385,-20361,-27826,-34372,-39670,-43477,-45645,-46126,-45028,-42514,-38857,-34418,-29602,-24801,-20452,-16915,-14507,-13454,-13875,-15786,-19097,-23582,-28970,-34839,-40784,-46322,-51002,-54403,-56179,-56029,-53801,-49467,-43101,-34944,-25298,-14643,-3461,7630,18089,27299,34749,39986,42650,42559,39610,33921,25689,15320,3310,-9737,-23146,-36193,-48188,-58422,-66307,-71319,-73080,-71349,-66082,-57353,-45404,-30670,-13649,4996,24560,44320,63493,81357,97264,110643,121042,128131,131743,131848,128567,122141,112931,101418,88114,73606,58467,43267,28548,14763,2317,-8502,-17502,-24605,-29797,-33184,-34974,-35381,-34704,-33244,-31333,-29271,-27344,-25764,-24711,-24319,-24620,-25614,-27224,-29331,-31784,-34403,-36961,-39264,-41130,-42364,-42860,-42484,-41205,-39023,-35938,-32070,-27525,-22453,-17005,-11392,-5794,-376,4680,9225,13168,16403,18887,20572,21520,21746,21325,20346,18902,17096,15079,12927,10745,8638,6666,9812];
 INTER_FACTOR  = 1;
 DECI_FACTOR  =  1;
 MSB_RM  = 0;
 MSB_TYPE  = 0;
 LSB_RM  = 0;
 LSB_TYPE  = 0;
 FIR_WIDTH  = 48 + MSB_RM + LSB_RM;
 OUT_WIDTH  = 48 ;  %48
 DATA_WIDTH = 13;

  
 % check size of inputs. 
 DY = size(stimulation, 2);
 CY = size(coef_matrix_in, 2);
 if CY ~= DY * INTER_FACTOR
    fprintf('WARNING : coef_matrix size and input data size does not match\n');
 end 

 %fill coef_matrix to length of data with the latest coef set 
 if CY < DY * INTER_FACTOR
     coef_matrix = coef_matrix_in(bank + 1, :);
   end 
	  
 % check if input is integer 
       	int_sti=round(stimulation); 
	    T = (int_sti ~= stimulation); 
	    if (max(T)~=0) 
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n'); 
	    end 
	     
	    %Input overflow check 
        %set max/min for signed 
        maxdat = 2^(DATA_WIDTH-1)-1; 
        mindat = -maxdat-1; 

	    %Saturating Input Value 
	    a=find(int_sti>maxdat); 
	    b=find(int_sti<mindat); 
	    if (~isempty(a)|~isempty(b)) 
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n'); 
	            lena = length (a); 
	            lenb = length (b); 
	            for i =1:lena 
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat); 
			        int_sti(a(i)) = maxdat; 
		        end 
		    for i =1:lenb 
			    fprintf('%d < %d \n', int_sti(b(i)), mindat); 
			    int_sti(b(i)) = mindat; 
		    end 
	    end 
         
	    % Add interpolation 
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti)); 
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti; 
 
         
        for i = 1 : DY *INTER_FACTOR 
    	    coef_current = coef_matrix(i,:); 
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i); 
        end 

	% Truncate output 
	len1 = length(output_temp); 
	 
	    switch  LSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH); 
	    case 1 
	        %round 
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH); 
	    end 
         
 	    switch  MSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM); 
	    case 1 
	        %round 
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM); 
	    end 
 	    
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1) 
     		output = out_dec; 
else
    output = out_dec(1:DECI_FACTOR:len1);
end

function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index)

	%Simulation is the whole input sequence 
	%coef_current is the current coefficient set 
	%data_index gives the last data to use 
    % output is the sum of input and coef multiplication
	%outindex is the next data_index 
    
    coef_length = length(coef_current);
	data_length = length(int_sti); 
	 
	if (data_index > data_length) 
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n'); 
        return
	end 
    min_index = max(data_index - data_length, 1);
    max_index = min(data_index, coef_length);
	 
	outindex= data_index+1; 
    output = int_sti(data_index + 1 - (min_index:max_index)) * coef_current(min_index:max_index).';
 
function output = bi_round(data_in,LSB_RM,ORI_WIDTH)
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width

	data = round (data_in / 2^LSB_RM);

	output = bi_satu(data,0,ORI_WIDTH - LSB_RM); 
	 
function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH)
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	output = bitshift((2^ORI_WIDTH*(data_in<0)) + (2^LSB_RM)*floor(data_in/(2^LSB_RM)), -LSB_RM) - (2^(ORI_WIDTH-LSB_RM)) *(data_in<0); 
	 
function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH)
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in; 
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1; 
	data = bitand(data, erase_num); 
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM)); 
	 
function output = bi_satu(data_in,MSB_RM,ORI_WIDTH)
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	maxdat = 2^(ORI_WIDTH - MSB_RM - 1)-1; 
	mindat = 2^(ORI_WIDTH - MSB_RM - 1)*(-1); 
    data_in(data_in > maxdat) = maxdat;
    data_in(data_in < mindat) = mindat;
	output = data_in; 

