%
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!
%
%---------------------------------------------------------------------------------------------------------
%This is a filter with fixed coefficients.
%This Model Only Support Single Channel Input Data.
%Please input:
%data vector: 		stimulation(1:n)

%    This Model Only Support FIR_WIDTH to 51 Bits

%FILTER PARAMETER
%Input Data Width: 13
%Interpolation Factor: 1
%Decimation Factor: 1
%FIR Width (Full Calculation Width Before Output Width Adjust) :24
%-----------------------------------------------------------------------------------------------------------
%MegaWizard Scaled Coefficient Values

function  output = fir_2_10hz_nco_mlab(stimulation, bank);
 coef_matrix_in= [2044075,721308,660411,418923,-58528,-826722,-1939977,-3445278,-5382150,-7774076,-10627184,-13922821,-17620610,-21652090,-25921443,-30301209,-34650423,-38795504,-42555812,-45739401,-48155260,-49621761,-49975758,-49082515,-46845303,-43212243,-38183027,-31813086,-24216673,-15563709,-6077086,3972506,14278989,24510725,34324382,43381989,51363450,57985999,63015012,66279805,67680585,67198726,64896415,60918249,55483673,48880540,41448087,33565098,25627259,18030499,11148264,5313509,799740,-2192325,-3547682,-3241853,-1344112,1987785,6513970,11928093,17872497,23960166,29795534,34998903,39226817,42194808,43691420,43594174,41874367,38601892,33938698,28132213,21498062,14403452,7242596,414942,-5702159,-10774348,-14534185,-16795885,-17469691,-16566617,-14200252,-10578632,-5993780,-802017,4596293,9783987,14351522,17925657,20191763,20916952,19964243,17304568,13018074,7292787,411349,-7263446,-15313505,-23289433,-30741648,-37247355,-42440604,-46034879,-47844928,-47798349,-45943947,-42448164,-37587996,-31732411,-25321122,-18835038,-12766693,-7586140,-3711094,-1476593,-1113093,-2727470,-6295537,-11659313,-18536948,-26537208,-35185063,-43949885,-52281297,-59643303,-65551990,-69606561,-71519304,-71134842,-68444606,-63588404,-56849454,-48636602,-39460928,-29902176,-20572897,-12076666,-4969243,280902,3324153,3956693,2135685,-2013427,-8203297,-15999269,-24846870,-34105070,-43088781,-51112281,-57536492,-61811283,-63515340,-62385745,-58340097,-51484515,-42111808,-30684514,-17808906,-4196332,9380872,22140749,33342517,42337863,48615075,51836899,51865560,48777025,42859158,34597762,24647066,13790212,2888497,-7173950,-15550046,-21486512,-24377542,-23807831,-19585776,-11760398,-624584,13299865,29290976,46471131,63861267,80444786,95233582,107335505,116015060,120746712,121253699,117532653,109858982,98775128,85059357,69679401,53730975,38367785,24724520,13840888,6588761,3610234,5268308,11616418,22386568,37000116,54598167,74092901,94233946,113688735,131128871,145319667,155204348,159979611,159155006,152594024,140531316,123566828,102634152,78946984,53924345,29101337,6028737,-13829943,-29199327,-39082023,-42833357,-40213408,-31414614,-17059998,1826172,23876437,47461584,70792929,92036922,109437178,121433590,126773004,124601470,114533746,96692509,71716080,40731011,5292455,-32706767,-71151221,-107837344,-140616774,-167541668,-187000217,-197835209,-199435347,-191794411,-175531221,-151870049,-122579347,-89873328,-56279888,-24484112,2845013,23232134,34567677,35261342,24368207,1676304,-32249458,-76073430,-127744966,-184603922,-243529126,-301123816,-353925771,-398631254,-432317753,-452652190,-458070105,-447913864,-422518763,-383240336,-332417419,-273271952,-209747406,-146294739,-87615143,-38374752,-2906320,15083767,12786384,-11479837,-58092562,-126018267,-212781263,-314515303,-426097231,-541359529,-653371338,-754776633,-838170880,-896498785,-923449350,-913829578,-863893063,-771605753,-636832566,-461432331,-249253154,-6027122,260834060,542532837,829256585,1110606326,1376064575,1615475756,1819518081,1980140605,2090943876,2147483647,2147483647,2090943876,1980140605,1819518081,1615475756,1376064575,1110606326,829256585,542532837,260834060,-6027122,-249253154,-461432331,-636832566,-771605753,-863893063,-913829578,-923449350,-896498785,-838170880,-754776633,-653371338,-541359529,-426097231,-314515303,-212781263,-126018267,-58092562,-11479837,12786384,15083767,-2906320,-38374752,-87615143,-146294739,-209747406,-273271952,-332417419,-383240336,-422518763,-447913864,-458070105,-452652190,-432317753,-398631254,-353925771,-301123816,-243529126,-184603922,-127744966,-76073430,-32249458,1676304,24368207,35261342,34567677,23232134,2845013,-24484112,-56279888,-89873328,-122579347,-151870049,-175531221,-191794411,-199435347,-197835209,-187000217,-167541668,-140616774,-107837344,-71151221,-32706767,5292455,40731011,71716080,96692509,114533746,124601470,126773004,121433590,109437178,92036922,70792929,47461584,23876437,1826172,-17059998,-31414614,-40213408,-42833357,-39082023,-29199327,-13829943,6028737,29101337,53924345,78946984,102634152,123566828,140531316,152594024,159155006,159979611,155204348,145319667,131128871,113688735,94233946,74092901,54598167,37000116,22386568,11616418,5268308,3610234,6588761,13840888,24724520,38367785,53730975,69679401,85059357,98775128,109858982,117532653,121253699,120746712,116015060,107335505,95233582,80444786,63861267,46471131,29290976,13299865,-624584,-11760398,-19585776,-23807831,-24377542,-21486512,-15550046,-7173950,2888497,13790212,24647066,34597762,42859158,48777025,51865560,51836899,48615075,42337863,33342517,22140749,9380872,-4196332,-17808906,-30684514,-42111808,-51484515,-58340097,-62385745,-63515340,-61811283,-57536492,-51112281,-43088781,-34105070,-24846870,-15999269,-8203297,-2013427,2135685,3956693,3324153,280902,-4969243,-12076666,-20572897,-29902176,-39460928,-48636602,-56849454,-63588404,-68444606,-71134842,-71519304,-69606561,-65551990,-59643303,-52281297,-43949885,-35185063,-26537208,-18536948,-11659313,-6295537,-2727470,-1113093,-1476593,-3711094,-7586140,-12766693,-18835038,-25321122,-31732411,-37587996,-42448164,-45943947,-47798349,-47844928,-46034879,-42440604,-37247355,-30741648,-23289433,-15313505,-7263446,411349,7292787,13018074,17304568,19964243,20916952,20191763,17925657,14351522,9783987,4596293,-802017,-5993780,-10578632,-14200252,-16566617,-17469691,-16795885,-14534185,-10774348,-5702159,414942,7242596,14403452,21498062,28132213,33938698,38601892,41874367,43594174,43691420,42194808,39226817,34998903,29795534,23960166,17872497,11928093,6513970,1987785,-1344112,-3241853,-3547682,-2192325,799740,5313509,11148264,18030499,25627259,33565098,41448087,48880540,55483673,60918249,64896415,67198726,67680585,66279805,63015012,57985999,51363450,43381989,34324382,24510725,14278989,3972506,-6077086,-15563709,-24216673,-31813086,-38183027,-43212243,-46845303,-49082515,-49975758,-49621761,-48155260,-45739401,-42555812,-38795504,-34650423,-30301209,-25921443,-21652090,-17620610,-13922821,-10627184,-7774076,-5382150,-3445278,-1939977,-826722,-58528,418923,660411,721308,2044075];
 INTER_FACTOR  = 1;
 DECI_FACTOR  =  1;
 MSB_RM  = 0;
 MSB_TYPE  = 0;
 LSB_RM  = 31;
 LSB_TYPE  = 0;
 FIR_WIDTH  = 24 + MSB_RM + LSB_RM;
 OUT_WIDTH  = 24 ;  %24
 DATA_WIDTH = 13;

  
 % check size of inputs. 
 DY = size(stimulation, 2);
 CY = size(coef_matrix_in, 2);
 if CY ~= DY * INTER_FACTOR
    fprintf('WARNING : coef_matrix size and input data size does not match\n');
 end 

 %fill coef_matrix to length of data with the latest coef set 
 if CY < DY * INTER_FACTOR
     coef_matrix = coef_matrix_in(bank + 1, :);
   end 
	  
 % check if input is integer 
       	int_sti=round(stimulation); 
	    T = (int_sti ~= stimulation); 
	    if (max(T)~=0) 
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n'); 
	    end 
	     
	    %Input overflow check 
        %set max/min for signed 
        maxdat = 2^(DATA_WIDTH-1)-1; 
        mindat = -maxdat-1; 

	    %Saturating Input Value 
	    a=find(int_sti>maxdat); 
	    b=find(int_sti<mindat); 
	    if (~isempty(a)|~isempty(b)) 
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n'); 
	            lena = length (a); 
	            lenb = length (b); 
	            for i =1:lena 
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat); 
			        int_sti(a(i)) = maxdat; 
		        end 
		    for i =1:lenb 
			    fprintf('%d < %d \n', int_sti(b(i)), mindat); 
			    int_sti(b(i)) = mindat; 
		    end 
	    end 
         
	    % Add interpolation 
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti)); 
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti; 
 
         
        for i = 1 : DY *INTER_FACTOR 
    	    coef_current = coef_matrix(i,:); 
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i); 
        end 

	% Truncate output 
	len1 = length(output_temp); 
	 
	    switch  LSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH); 
	    case 1 
	        %round 
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH); 
	    end 
         
 	    switch  MSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM); 
	    case 1 
	        %round 
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM); 
	    end 
 	    
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1) 
     		output = out_dec; 
else
    output = out_dec(1:DECI_FACTOR:len1);
end

function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index)

	%Simulation is the whole input sequence 
	%coef_current is the current coefficient set 
	%data_index gives the last data to use 
    % output is the sum of input and coef multiplication
	%outindex is the next data_index 
    
    coef_length = length(coef_current);
	data_length = length(int_sti); 
	 
	if (data_index > data_length) 
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n'); 
        return
	end 
    min_index = max(data_index - data_length, 1);
    max_index = min(data_index, coef_length);
	 
	outindex= data_index+1; 
    output = int_sti(data_index + 1 - (min_index:max_index)) * coef_current(min_index:max_index).';
 
function output = bi_round(data_in,LSB_RM,ORI_WIDTH)
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width

	data = round (data_in / 2^LSB_RM);

	output = bi_satu(data,0,ORI_WIDTH - LSB_RM); 
	 
function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH)
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	output = bitshift((2^ORI_WIDTH*(data_in<0)) + (2^LSB_RM)*floor(data_in/(2^LSB_RM)), -LSB_RM) - (2^(ORI_WIDTH-LSB_RM)) *(data_in<0); 
	 
function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH)
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in; 
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1; 
	data = bitand(data, erase_num); 
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM)); 
	 
function output = bi_satu(data_in,MSB_RM,ORI_WIDTH)
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	maxdat = 2^(ORI_WIDTH - MSB_RM - 1)-1; 
	mindat = 2^(ORI_WIDTH - MSB_RM - 1)*(-1); 
    data_in(data_in > maxdat) = maxdat;
    data_in(data_in < mindat) = mindat;
	output = data_in; 

