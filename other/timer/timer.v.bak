`timescale 1 ns / 1 ns
module timer(
		input clk,
		input rst,
		input test_complete,
		
		output reg [24:0]  user0_avl_address,              //user0_avl.address
		output reg         user0_avl_write,                //.write
		output reg         user0_avl_read,                 //.read
		input  wire[63:0]  user0_avl_readdata,             //.readdata
		output reg [63:0]  user0_avl_writedata,            //.writedata
		output reg         user0_avl_beginbursttransfer,   //.beginbursttransfer
		output wire [3:0]   user0_avl_burstcount,           //.burstcount
		output wire[7:0]   user0_avl_byteenable,           //.byteenable
		input  wire        user0_avl_readdatavalid,        //.readdatavalid
		input  wire        user0_avl_waitrequest,          //.waitrequest_n
		
		input 	  [24:0]	 user0_ddr_add,
		input 				 ads_minute5_enable,
		input 				 user0_ddr_disable,
		input 				 user0_takeout_datvalid,
		
		input 	  [63:0]  user0_ads_dat,
		input 	  [3:0]   user0_ads_dat_en,
		
		output reg [63:0]	 takeout_dat
	);

 wire pos50m_ads_minute5_enable,neg50m_ads_minute5_enable;
 reg ads_minute5_enable_50mr0,ads_minute5_enable_50mr1,ads_minute5_enable_50mr2;
 always@(posedge clk_50m)
	begin
		ads_minute5_enable_50mr0<=ads_minute5_enable;
		ads_minute5_enable_50mr1<=ads_minute5_enable_50mr0;
		ads_minute5_enable_50mr2<=ads_minute5_enable_50mr1;
	end
assign pos50m_ads_minute5_enable=(~ads_minute5_enable_50mr2)&ads_minute5_enable_50mr1;
assign neg50m_ads_minute5_enable=ads_minute5_enable_50mr2&(~ads_minute5_enable_50mr1);   
	
 reg [15:0]timecnt_ads;
 reg [7:0]minute_ads,second_ads;
 reg [15:0]msecond_ads;
 always @(posedge clk_50m)
	begin
		if(minute_ads==5)minute5_arrive<=1;
		else	minute5_arrive<=0;
	end
 
 always @(posedge clk_50m)
	begin
		if(pos50m_ads_minute5_enable)
			begin
				minute_ads	<=0;
				second_ads	<=0;
				msecond_ads <=0;
				timecnt_ads	<=0;
			end
		else
			begin
				if(minute_ads==5)
					begin
						minute_ads	<=minute_ads;
					end
				else
					begin
						if(second_ads==59)
							begin
								minute_ads<=minute_ads+1;
								second_ads<=0;
							end
						else
							begin
								minute_ads<=minute_ads;
								if(msecond_ads==999)
									begin
										second_ads<=second_ads+1;
										msecond_ads<=0;
									end
								else
									begin
										second_ads<=second_ads;//50_000*20ns=1ms--50Mhz clock
										if(timecnt_ads==50_000)
											begin
												msecond_ads<=msecond_ads+1;
												timecnt_ads<=0;
											end
										else
											begin
												msecond_ads<=msecond_ads;
												timecnt_ads<=timecnt_ads+1;
											end
									end
							end
					end
			end
	end
	
endmodule